@page "/pubs/5"
@inject PubViewModel5 ViewModel

<h3 style="display:inline">Edit Pub @(ViewModel.Pub?.Name) </h3>
@if (ViewModel.Pub != null)
{
    <hr />
    <div class="form-group">
        <button @onclick="ViewModel.Save" class="btn btn-primary" disabled="@(ViewModel.IsBusy || !ViewModel.IsValid)">Save</button>
    </div>
    <EditForm EditContext="@Context">
        <FluentValidator></FluentValidator>
        <div class="row">
            <div class="form-group col-2">
                <label class="control-label">Id</label>
                <input @bind="@ViewModel.Pub.Id" class="form-control" readonly />
            </div>
            <div class="form-group col-5">
                <label class="control-label">Name</label>
                <InputText @bind-Value="@ViewModel.Pub.Name" class="form-control" autocomplet="off" />
                <ValidationMessage For="@(() => ViewModel.Pub.Name)" />
            </div>
            <div class="form-group col-5">
                <label class="control-label">Rank (1-5)</label>
                <InputNumber @bind-Value="@ViewModel.Pub.Rank" class="form-control" />
                <ValidationMessage For="@(() => ViewModel.Pub.Rank)" />
            </div>
        </div>
        <TapsEditor Pub="@ViewModel.Pub" Add="@ViewModel.AddTap" />
    </EditForm>
}

@code {
    public EditContext Context { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await ViewModel.Initialize(5);
        Context = new EditContext(ViewModel.Pub);
        ViewModel.Validator = Context.Validate;
        ViewModel.StateChanged = StateHasChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ViewModel.IsValid = Context.Validate();
            StateHasChanged();
        }
    }
}
